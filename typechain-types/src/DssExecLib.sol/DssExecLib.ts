/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DssExecLibInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LOG"
      | "autoLine"
      | "calc"
      | "canCast"
      | "cat"
      | "clip"
      | "clipperMom"
      | "dai"
      | "daiJoin"
      | "dog"
      | "end"
      | "esm"
      | "flap"
      | "flip"
      | "flipperMom"
      | "flop"
      | "getChangelogAddress"
      | "govGuard"
      | "jug"
      | "lerpFab"
      | "mkr"
      | "nextCastTime"
      | "osmMom"
      | "pauseProxy"
      | "pot"
      | "reg"
      | "spotter"
      | "vat"
      | "vow"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "LOG", values?: undefined): string;
  encodeFunctionData(functionFragment: "autoLine", values?: undefined): string;
  encodeFunctionData(functionFragment: "calc", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "canCast",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "cat", values?: undefined): string;
  encodeFunctionData(functionFragment: "clip", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "clipperMom",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "daiJoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "dog", values?: undefined): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(functionFragment: "esm", values?: undefined): string;
  encodeFunctionData(functionFragment: "flap", values?: undefined): string;
  encodeFunctionData(functionFragment: "flip", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "flipperMom",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "flop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChangelogAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "govGuard", values?: undefined): string;
  encodeFunctionData(functionFragment: "jug", values?: undefined): string;
  encodeFunctionData(functionFragment: "lerpFab", values?: undefined): string;
  encodeFunctionData(functionFragment: "mkr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextCastTime",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "osmMom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(functionFragment: "reg", values?: undefined): string;
  encodeFunctionData(functionFragment: "spotter", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;

  decodeFunctionResult(functionFragment: "LOG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoLine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canCast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clipperMom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daiJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "esm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flipperMom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChangelogAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jug", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lerpFab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mkr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextCastTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "osmMom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spotter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
}

export interface DssExecLib extends BaseContract {
  connect(runner?: ContractRunner | null): DssExecLib;
  waitForDeployment(): Promise<this>;

  interface: DssExecLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LOG: TypedContractMethod<[], [string], "view">;

  autoLine: TypedContractMethod<[], [string], "view">;

  calc: TypedContractMethod<[_ilk: BytesLike], [string], "view">;

  canCast: TypedContractMethod<
    [_ts: BigNumberish, _officeHours: boolean],
    [boolean],
    "view"
  >;

  cat: TypedContractMethod<[], [string], "view">;

  clip: TypedContractMethod<[_ilk: BytesLike], [string], "view">;

  clipperMom: TypedContractMethod<[], [string], "view">;

  dai: TypedContractMethod<[], [string], "view">;

  daiJoin: TypedContractMethod<[], [string], "view">;

  dog: TypedContractMethod<[], [string], "view">;

  end: TypedContractMethod<[], [string], "view">;

  esm: TypedContractMethod<[], [string], "view">;

  flap: TypedContractMethod<[], [string], "view">;

  flip: TypedContractMethod<[_ilk: BytesLike], [string], "view">;

  flipperMom: TypedContractMethod<[], [string], "view">;

  flop: TypedContractMethod<[], [string], "view">;

  getChangelogAddress: TypedContractMethod<[_key: BytesLike], [string], "view">;

  govGuard: TypedContractMethod<[], [string], "view">;

  jug: TypedContractMethod<[], [string], "view">;

  lerpFab: TypedContractMethod<[], [string], "view">;

  mkr: TypedContractMethod<[], [string], "view">;

  nextCastTime: TypedContractMethod<
    [_eta: BigNumberish, _ts: BigNumberish, _officeHours: boolean],
    [bigint],
    "view"
  >;

  osmMom: TypedContractMethod<[], [string], "view">;

  pauseProxy: TypedContractMethod<[], [string], "view">;

  pot: TypedContractMethod<[], [string], "view">;

  reg: TypedContractMethod<[], [string], "view">;

  spotter: TypedContractMethod<[], [string], "view">;

  vat: TypedContractMethod<[], [string], "view">;

  vow: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LOG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "autoLine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calc"
  ): TypedContractMethod<[_ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "canCast"
  ): TypedContractMethod<
    [_ts: BigNumberish, _officeHours: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "cat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clip"
  ): TypedContractMethod<[_ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "clipperMom"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dai"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "daiJoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dog"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "end"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "esm"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "flap"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "flip"
  ): TypedContractMethod<[_ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "flipperMom"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "flop"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getChangelogAddress"
  ): TypedContractMethod<[_key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "govGuard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jug"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lerpFab"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mkr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextCastTime"
  ): TypedContractMethod<
    [_eta: BigNumberish, _ts: BigNumberish, _officeHours: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "osmMom"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reg"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "spotter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vow"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}

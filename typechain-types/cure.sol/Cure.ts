/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amt"
      | "cage"
      | "deny"
      | "drop"
      | "file"
      | "lCount"
      | "lift"
      | "list"
      | "live"
      | "load"
      | "loaded"
      | "pos"
      | "rely"
      | "say"
      | "srcs"
      | "tCount"
      | "tell"
      | "wait"
      | "wards"
      | "when"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cage"
      | "Deny"
      | "Drop"
      | "File"
      | "Lift"
      | "Load"
      | "Rely"
  ): EventFragment;

  encodeFunctionData(functionFragment: "amt", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "drop", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "lift", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "load", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "loaded", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pos", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "say", values?: undefined): string;
  encodeFunctionData(functionFragment: "srcs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "tell", values?: undefined): string;
  encodeFunctionData(functionFragment: "wait", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "when", values?: undefined): string;

  decodeFunctionResult(functionFragment: "amt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "load", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loaded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "say", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "srcs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "when", data: BytesLike): Result;
}

export namespace CageEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DenyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DropEvent {
  export type InputTuple = [src: AddressLike];
  export type OutputTuple = [src: string];
  export interface OutputObject {
    src: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FileEvent {
  export type InputTuple = [what: BytesLike, data: BigNumberish];
  export type OutputTuple = [what: string, data: bigint];
  export interface OutputObject {
    what: string;
    data: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiftEvent {
  export type InputTuple = [src: AddressLike];
  export type OutputTuple = [src: string];
  export interface OutputObject {
    src: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoadEvent {
  export type InputTuple = [src: AddressLike];
  export type OutputTuple = [src: string];
  export interface OutputObject {
    src: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Cure extends BaseContract {
  connect(runner?: ContractRunner | null): Cure;
  waitForDeployment(): Promise<this>;

  interface: CureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amt: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  cage: TypedContractMethod<[], [void], "nonpayable">;

  deny: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  drop: TypedContractMethod<[src: AddressLike], [void], "nonpayable">;

  file: TypedContractMethod<
    [what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;

  lCount: TypedContractMethod<[], [bigint], "view">;

  lift: TypedContractMethod<[src: AddressLike], [void], "nonpayable">;

  list: TypedContractMethod<[], [string[]], "view">;

  live: TypedContractMethod<[], [bigint], "view">;

  load: TypedContractMethod<[src: AddressLike], [void], "nonpayable">;

  loaded: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pos: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rely: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  say: TypedContractMethod<[], [bigint], "view">;

  srcs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tCount: TypedContractMethod<[], [bigint], "view">;

  tell: TypedContractMethod<[], [bigint], "view">;

  wait: TypedContractMethod<[], [bigint], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  when: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "cage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "drop"
  ): TypedContractMethod<[src: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "file"
  ): TypedContractMethod<
    [what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lift"
  ): TypedContractMethod<[src: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "live"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "load"
  ): TypedContractMethod<[src: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loaded"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pos"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "say"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "srcs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tell"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wait"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "when"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Cage"
  ): TypedContractEvent<
    CageEvent.InputTuple,
    CageEvent.OutputTuple,
    CageEvent.OutputObject
  >;
  getEvent(
    key: "Deny"
  ): TypedContractEvent<
    DenyEvent.InputTuple,
    DenyEvent.OutputTuple,
    DenyEvent.OutputObject
  >;
  getEvent(
    key: "Drop"
  ): TypedContractEvent<
    DropEvent.InputTuple,
    DropEvent.OutputTuple,
    DropEvent.OutputObject
  >;
  getEvent(
    key: "File"
  ): TypedContractEvent<
    FileEvent.InputTuple,
    FileEvent.OutputTuple,
    FileEvent.OutputObject
  >;
  getEvent(
    key: "Lift"
  ): TypedContractEvent<
    LiftEvent.InputTuple,
    LiftEvent.OutputTuple,
    LiftEvent.OutputObject
  >;
  getEvent(
    key: "Load"
  ): TypedContractEvent<
    LoadEvent.InputTuple,
    LoadEvent.OutputTuple,
    LoadEvent.OutputObject
  >;
  getEvent(
    key: "Rely"
  ): TypedContractEvent<
    RelyEvent.InputTuple,
    RelyEvent.OutputTuple,
    RelyEvent.OutputObject
  >;

  filters: {
    "Cage()": TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;
    Cage: TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;

    "Deny(address)": TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;
    Deny: TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;

    "Drop(address)": TypedContractEvent<
      DropEvent.InputTuple,
      DropEvent.OutputTuple,
      DropEvent.OutputObject
    >;
    Drop: TypedContractEvent<
      DropEvent.InputTuple,
      DropEvent.OutputTuple,
      DropEvent.OutputObject
    >;

    "File(bytes32,uint256)": TypedContractEvent<
      FileEvent.InputTuple,
      FileEvent.OutputTuple,
      FileEvent.OutputObject
    >;
    File: TypedContractEvent<
      FileEvent.InputTuple,
      FileEvent.OutputTuple,
      FileEvent.OutputObject
    >;

    "Lift(address)": TypedContractEvent<
      LiftEvent.InputTuple,
      LiftEvent.OutputTuple,
      LiftEvent.OutputObject
    >;
    Lift: TypedContractEvent<
      LiftEvent.InputTuple,
      LiftEvent.OutputTuple,
      LiftEvent.OutputObject
    >;

    "Load(address)": TypedContractEvent<
      LoadEvent.InputTuple,
      LoadEvent.OutputTuple,
      LoadEvent.OutputObject
    >;
    Load: TypedContractEvent<
      LoadEvent.InputTuple,
      LoadEvent.OutputTuple,
      LoadEvent.OutputObject
    >;

    "Rely(address)": TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;
    Rely: TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;
  };
}

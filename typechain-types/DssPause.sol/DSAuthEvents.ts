/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface DSAuthEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "LogSetAuthority" | "LogSetOwner"
  ): EventFragment;
}

export namespace LogSetAuthorityEvent {
  export type InputTuple = [authority: AddressLike];
  export type OutputTuple = [authority: string];
  export interface OutputObject {
    authority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetOwnerEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DSAuthEvents extends BaseContract {
  connect(runner?: ContractRunner | null): DSAuthEvents;
  waitForDeployment(): Promise<this>;

  interface: DSAuthEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "LogSetAuthority"
  ): TypedContractEvent<
    LogSetAuthorityEvent.InputTuple,
    LogSetAuthorityEvent.OutputTuple,
    LogSetAuthorityEvent.OutputObject
  >;
  getEvent(
    key: "LogSetOwner"
  ): TypedContractEvent<
    LogSetOwnerEvent.InputTuple,
    LogSetOwnerEvent.OutputTuple,
    LogSetOwnerEvent.OutputObject
  >;

  filters: {
    "LogSetAuthority(address)": TypedContractEvent<
      LogSetAuthorityEvent.InputTuple,
      LogSetAuthorityEvent.OutputTuple,
      LogSetAuthorityEvent.OutputObject
    >;
    LogSetAuthority: TypedContractEvent<
      LogSetAuthorityEvent.InputTuple,
      LogSetAuthorityEvent.OutputTuple,
      LogSetAuthorityEvent.OutputObject
    >;

    "LogSetOwner(address)": TypedContractEvent<
      LogSetOwnerEvent.InputTuple,
      LogSetOwnerEvent.OutputTuple,
      LogSetOwnerEvent.OutputObject
    >;
    LogSetOwner: TypedContractEvent<
      LogSetOwnerEvent.InputTuple,
      LogSetOwnerEvent.OutputTuple,
      LogSetOwnerEvent.OutputObject
    >;
  };
}

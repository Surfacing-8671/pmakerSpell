/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CurveLPOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bud"
      | "deny"
      | "diss(address[])"
      | "diss(address)"
      | "hop"
      | "kiss(address[])"
      | "kiss(address)"
      | "link"
      | "ncoins"
      | "nonreentrant"
      | "orbs"
      | "pass"
      | "peek"
      | "peep"
      | "poke"
      | "pool"
      | "read"
      | "rely"
      | "src"
      | "start"
      | "step"
      | "stop"
      | "stopped"
      | "wards"
      | "wat"
      | "zph"
      | "zzz"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deny"
      | "Diss"
      | "Kiss"
      | "Link"
      | "Rely"
      | "Start"
      | "Step"
      | "Stop"
      | "Value"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bud", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "diss(address[])",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "diss(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kiss(address[])",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "kiss(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "link",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ncoins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonreentrant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "orbs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pass", values?: undefined): string;
  encodeFunctionData(functionFragment: "peek", values?: undefined): string;
  encodeFunctionData(functionFragment: "peep", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "read", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "src", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "step", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "wat", values?: undefined): string;
  encodeFunctionData(functionFragment: "zph", values?: undefined): string;
  encodeFunctionData(functionFragment: "zzz", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bud", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diss(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diss(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kiss(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kiss(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ncoins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonreentrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orbs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "src", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zph", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zzz", data: BytesLike): Result;
}

export namespace DenyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DissEvent {
  export type InputTuple = [a: AddressLike];
  export type OutputTuple = [a: string];
  export interface OutputObject {
    a: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KissEvent {
  export type InputTuple = [a: AddressLike];
  export type OutputTuple = [a: string];
  export interface OutputObject {
    a: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LinkEvent {
  export type InputTuple = [id: BigNumberish, orb: AddressLike];
  export type OutputTuple = [id: bigint, orb: string];
  export interface OutputObject {
    id: bigint;
    orb: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StepEvent {
  export type InputTuple = [hop: BigNumberish];
  export type OutputTuple = [hop: bigint];
  export interface OutputObject {
    hop: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StopEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValueEvent {
  export type InputTuple = [curVal: BigNumberish, nxtVal: BigNumberish];
  export type OutputTuple = [curVal: bigint, nxtVal: bigint];
  export interface OutputObject {
    curVal: bigint;
    nxtVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CurveLPOracle extends BaseContract {
  connect(runner?: ContractRunner | null): CurveLPOracle;
  waitForDeployment(): Promise<this>;

  interface: CurveLPOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bud: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  deny: TypedContractMethod<[_usr: AddressLike], [void], "nonpayable">;

  "diss(address[])": TypedContractMethod<
    [_a: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "diss(address)": TypedContractMethod<[_a: AddressLike], [void], "nonpayable">;

  hop: TypedContractMethod<[], [bigint], "view">;

  "kiss(address[])": TypedContractMethod<
    [_a: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "kiss(address)": TypedContractMethod<[_a: AddressLike], [void], "nonpayable">;

  link: TypedContractMethod<
    [_id: BigNumberish, _orb: AddressLike],
    [void],
    "nonpayable"
  >;

  ncoins: TypedContractMethod<[], [bigint], "view">;

  nonreentrant: TypedContractMethod<[], [boolean], "view">;

  orbs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  pass: TypedContractMethod<[], [boolean], "view">;

  peek: TypedContractMethod<[], [[string, boolean]], "view">;

  peep: TypedContractMethod<[], [[string, boolean]], "view">;

  poke: TypedContractMethod<[], [void], "payable">;

  pool: TypedContractMethod<[], [string], "view">;

  read: TypedContractMethod<[], [string], "view">;

  rely: TypedContractMethod<[_usr: AddressLike], [void], "nonpayable">;

  src: TypedContractMethod<[], [string], "view">;

  start: TypedContractMethod<[], [void], "nonpayable">;

  step: TypedContractMethod<[_hop: BigNumberish], [void], "nonpayable">;

  stop: TypedContractMethod<[], [void], "nonpayable">;

  stopped: TypedContractMethod<[], [bigint], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  wat: TypedContractMethod<[], [string], "view">;

  zph: TypedContractMethod<[], [bigint], "view">;

  zzz: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bud"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[_usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "diss(address[])"
  ): TypedContractMethod<[_a: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "diss(address)"
  ): TypedContractMethod<[_a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hop"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "kiss(address[])"
  ): TypedContractMethod<[_a: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "kiss(address)"
  ): TypedContractMethod<[_a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "link"
  ): TypedContractMethod<
    [_id: BigNumberish, _orb: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ncoins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonreentrant"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "orbs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pass"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "peek"
  ): TypedContractMethod<[], [[string, boolean]], "view">;
  getFunction(
    nameOrSignature: "peep"
  ): TypedContractMethod<[], [[string, boolean]], "view">;
  getFunction(
    nameOrSignature: "poke"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "read"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[_usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "src"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "step"
  ): TypedContractMethod<[_hop: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stop"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopped"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "wat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zph"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "zzz"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Deny"
  ): TypedContractEvent<
    DenyEvent.InputTuple,
    DenyEvent.OutputTuple,
    DenyEvent.OutputObject
  >;
  getEvent(
    key: "Diss"
  ): TypedContractEvent<
    DissEvent.InputTuple,
    DissEvent.OutputTuple,
    DissEvent.OutputObject
  >;
  getEvent(
    key: "Kiss"
  ): TypedContractEvent<
    KissEvent.InputTuple,
    KissEvent.OutputTuple,
    KissEvent.OutputObject
  >;
  getEvent(
    key: "Link"
  ): TypedContractEvent<
    LinkEvent.InputTuple,
    LinkEvent.OutputTuple,
    LinkEvent.OutputObject
  >;
  getEvent(
    key: "Rely"
  ): TypedContractEvent<
    RelyEvent.InputTuple,
    RelyEvent.OutputTuple,
    RelyEvent.OutputObject
  >;
  getEvent(
    key: "Start"
  ): TypedContractEvent<
    StartEvent.InputTuple,
    StartEvent.OutputTuple,
    StartEvent.OutputObject
  >;
  getEvent(
    key: "Step"
  ): TypedContractEvent<
    StepEvent.InputTuple,
    StepEvent.OutputTuple,
    StepEvent.OutputObject
  >;
  getEvent(
    key: "Stop"
  ): TypedContractEvent<
    StopEvent.InputTuple,
    StopEvent.OutputTuple,
    StopEvent.OutputObject
  >;
  getEvent(
    key: "Value"
  ): TypedContractEvent<
    ValueEvent.InputTuple,
    ValueEvent.OutputTuple,
    ValueEvent.OutputObject
  >;

  filters: {
    "Deny(address)": TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;
    Deny: TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;

    "Diss(address)": TypedContractEvent<
      DissEvent.InputTuple,
      DissEvent.OutputTuple,
      DissEvent.OutputObject
    >;
    Diss: TypedContractEvent<
      DissEvent.InputTuple,
      DissEvent.OutputTuple,
      DissEvent.OutputObject
    >;

    "Kiss(address)": TypedContractEvent<
      KissEvent.InputTuple,
      KissEvent.OutputTuple,
      KissEvent.OutputObject
    >;
    Kiss: TypedContractEvent<
      KissEvent.InputTuple,
      KissEvent.OutputTuple,
      KissEvent.OutputObject
    >;

    "Link(uint256,address)": TypedContractEvent<
      LinkEvent.InputTuple,
      LinkEvent.OutputTuple,
      LinkEvent.OutputObject
    >;
    Link: TypedContractEvent<
      LinkEvent.InputTuple,
      LinkEvent.OutputTuple,
      LinkEvent.OutputObject
    >;

    "Rely(address)": TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;
    Rely: TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;

    "Start()": TypedContractEvent<
      StartEvent.InputTuple,
      StartEvent.OutputTuple,
      StartEvent.OutputObject
    >;
    Start: TypedContractEvent<
      StartEvent.InputTuple,
      StartEvent.OutputTuple,
      StartEvent.OutputObject
    >;

    "Step(uint256)": TypedContractEvent<
      StepEvent.InputTuple,
      StepEvent.OutputTuple,
      StepEvent.OutputObject
    >;
    Step: TypedContractEvent<
      StepEvent.InputTuple,
      StepEvent.OutputTuple,
      StepEvent.OutputObject
    >;

    "Stop()": TypedContractEvent<
      StopEvent.InputTuple,
      StopEvent.OutputTuple,
      StopEvent.OutputObject
    >;
    Stop: TypedContractEvent<
      StopEvent.InputTuple,
      StopEvent.OutputTuple,
      StopEvent.OutputObject
    >;

    "Value(uint128,uint128)": TypedContractEvent<
      ValueEvent.InputTuple,
      ValueEvent.OutputTuple,
      ValueEvent.OutputObject
    >;
    Value: TypedContractEvent<
      ValueEvent.InputTuple,
      ValueEvent.OutputTuple,
      ValueEvent.OutputObject
    >;
  };
}

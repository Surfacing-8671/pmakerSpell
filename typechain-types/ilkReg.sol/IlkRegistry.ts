/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IlkRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add"
      | "cat"
      | "class"
      | "count"
      | "dec"
      | "deny"
      | "dog"
      | "file(bytes32,bytes32,uint256)"
      | "file(bytes32,bytes32,string)"
      | "file(bytes32,address)"
      | "file(bytes32,bytes32,address)"
      | "gem"
      | "get"
      | "ilkData"
      | "info"
      | "join"
      | "list()"
      | "list(uint256,uint256)"
      | "name"
      | "pip"
      | "pos"
      | "put"
      | "rely"
      | "remove"
      | "removeAuth"
      | "spot"
      | "symbol"
      | "update"
      | "vat"
      | "wards"
      | "xlip"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddIlk"
      | "Deny"
      | "File(bytes32,address)"
      | "File(bytes32,bytes32,address)"
      | "File(bytes32,bytes32,uint256)"
      | "File(bytes32,bytes32,string)"
      | "NameError"
      | "Rely"
      | "RemoveIlk"
      | "SymbolError"
      | "UpdateIlk"
  ): EventFragment;

  encodeFunctionData(functionFragment: "add", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "cat", values?: undefined): string;
  encodeFunctionData(functionFragment: "class", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "dec", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "dog", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,bytes32,uint256)",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,bytes32,string)",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,bytes32,address)",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gem", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ilkData", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "info", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "join", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "list()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "list(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pip", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pos", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "put",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "remove", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "removeAuth",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "spot", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "update", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "xlip", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "class", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,bytes32,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilkData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "list(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "put", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xlip", data: BytesLike): Result;
}

export namespace AddIlkEvent {
  export type InputTuple = [ilk: BytesLike];
  export type OutputTuple = [ilk: string];
  export interface OutputObject {
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DenyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace File_bytes32_address_Event {
  export type InputTuple = [what: BytesLike, data: AddressLike];
  export type OutputTuple = [what: string, data: string];
  export interface OutputObject {
    what: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace File_bytes32_bytes32_address_Event {
  export type InputTuple = [ilk: BytesLike, what: BytesLike, data: AddressLike];
  export type OutputTuple = [ilk: string, what: string, data: string];
  export interface OutputObject {
    ilk: string;
    what: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace File_bytes32_bytes32_uint256_Event {
  export type InputTuple = [
    ilk: BytesLike,
    what: BytesLike,
    data: BigNumberish
  ];
  export type OutputTuple = [ilk: string, what: string, data: bigint];
  export interface OutputObject {
    ilk: string;
    what: string;
    data: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace File_bytes32_bytes32_string_Event {
  export type InputTuple = [ilk: BytesLike, what: BytesLike, data: string];
  export type OutputTuple = [ilk: string, what: string, data: string];
  export interface OutputObject {
    ilk: string;
    what: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameErrorEvent {
  export type InputTuple = [ilk: BytesLike];
  export type OutputTuple = [ilk: string];
  export interface OutputObject {
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveIlkEvent {
  export type InputTuple = [ilk: BytesLike];
  export type OutputTuple = [ilk: string];
  export interface OutputObject {
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SymbolErrorEvent {
  export type InputTuple = [ilk: BytesLike];
  export type OutputTuple = [ilk: string];
  export interface OutputObject {
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateIlkEvent {
  export type InputTuple = [ilk: BytesLike];
  export type OutputTuple = [ilk: string];
  export interface OutputObject {
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IlkRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IlkRegistry;
  waitForDeployment(): Promise<this>;

  interface: IlkRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;

  cat: TypedContractMethod<[], [string], "view">;

  class: TypedContractMethod<[ilk: BytesLike], [bigint], "view">;

  count: TypedContractMethod<[], [bigint], "view">;

  dec: TypedContractMethod<[ilk: BytesLike], [bigint], "view">;

  deny: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  dog: TypedContractMethod<[], [string], "view">;

  "file(bytes32,bytes32,uint256)": TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;

  "file(bytes32,bytes32,string)": TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: string],
    [void],
    "nonpayable"
  >;

  "file(bytes32,address)": TypedContractMethod<
    [what: BytesLike, data: AddressLike],
    [void],
    "nonpayable"
  >;

  "file(bytes32,bytes32,address)": TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: AddressLike],
    [void],
    "nonpayable"
  >;

  gem: TypedContractMethod<[ilk: BytesLike], [string], "view">;

  get: TypedContractMethod<[pos: BigNumberish], [string], "view">;

  ilkData: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        string
      ] & {
        pos: bigint;
        join: string;
        gem: string;
        dec: bigint;
        class: bigint;
        pip: string;
        xlip: string;
        name: string;
        symbol: string;
      }
    ],
    "view"
  >;

  info: TypedContractMethod<
    [ilk: BytesLike],
    [
      [string, string, bigint, bigint, string, string, string, string] & {
        name: string;
        symbol: string;
        class: bigint;
        dec: bigint;
        gem: string;
        pip: string;
        join: string;
        xlip: string;
      }
    ],
    "view"
  >;

  join: TypedContractMethod<[ilk: BytesLike], [string], "view">;

  "list()": TypedContractMethod<[], [string[]], "view">;

  "list(uint256,uint256)": TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [string[]],
    "view"
  >;

  name: TypedContractMethod<[ilk: BytesLike], [string], "view">;

  pip: TypedContractMethod<[ilk: BytesLike], [string], "view">;

  pos: TypedContractMethod<[ilk: BytesLike], [bigint], "view">;

  put: TypedContractMethod<
    [
      _ilk: BytesLike,
      _join: AddressLike,
      _gem: AddressLike,
      _dec: BigNumberish,
      _class: BigNumberish,
      _pip: AddressLike,
      _xlip: AddressLike,
      _name: string,
      _symbol: string
    ],
    [void],
    "nonpayable"
  >;

  rely: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  remove: TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;

  removeAuth: TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;

  spot: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[ilk: BytesLike], [string], "view">;

  update: TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;

  vat: TypedContractMethod<[], [string], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  xlip: TypedContractMethod<[ilk: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "class"
  ): TypedContractMethod<[ilk: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dec"
  ): TypedContractMethod<[ilk: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dog"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "file(bytes32,bytes32,uint256)"
  ): TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "file(bytes32,bytes32,string)"
  ): TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "file(bytes32,address)"
  ): TypedContractMethod<
    [what: BytesLike, data: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "file(bytes32,bytes32,address)"
  ): TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gem"
  ): TypedContractMethod<[ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[pos: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ilkData"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        string
      ] & {
        pos: bigint;
        join: string;
        gem: string;
        dec: bigint;
        class: bigint;
        pip: string;
        xlip: string;
        name: string;
        symbol: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "info"
  ): TypedContractMethod<
    [ilk: BytesLike],
    [
      [string, string, bigint, bigint, string, string, string, string] & {
        name: string;
        symbol: string;
        class: bigint;
        dec: bigint;
        gem: string;
        pip: string;
        join: string;
        xlip: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "list()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "list(uint256,uint256)"
  ): TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "pip"
  ): TypedContractMethod<[ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "pos"
  ): TypedContractMethod<[ilk: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "put"
  ): TypedContractMethod<
    [
      _ilk: BytesLike,
      _join: AddressLike,
      _gem: AddressLike,
      _dec: BigNumberish,
      _class: BigNumberish,
      _pip: AddressLike,
      _xlip: AddressLike,
      _name: string,
      _symbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuth"
  ): TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[ilk: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "xlip"
  ): TypedContractMethod<[ilk: BytesLike], [string], "view">;

  getEvent(
    key: "AddIlk"
  ): TypedContractEvent<
    AddIlkEvent.InputTuple,
    AddIlkEvent.OutputTuple,
    AddIlkEvent.OutputObject
  >;
  getEvent(
    key: "Deny"
  ): TypedContractEvent<
    DenyEvent.InputTuple,
    DenyEvent.OutputTuple,
    DenyEvent.OutputObject
  >;
  getEvent(
    key: "File(bytes32,address)"
  ): TypedContractEvent<
    File_bytes32_address_Event.InputTuple,
    File_bytes32_address_Event.OutputTuple,
    File_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "File(bytes32,bytes32,address)"
  ): TypedContractEvent<
    File_bytes32_bytes32_address_Event.InputTuple,
    File_bytes32_bytes32_address_Event.OutputTuple,
    File_bytes32_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "File(bytes32,bytes32,uint256)"
  ): TypedContractEvent<
    File_bytes32_bytes32_uint256_Event.InputTuple,
    File_bytes32_bytes32_uint256_Event.OutputTuple,
    File_bytes32_bytes32_uint256_Event.OutputObject
  >;
  getEvent(
    key: "File(bytes32,bytes32,string)"
  ): TypedContractEvent<
    File_bytes32_bytes32_string_Event.InputTuple,
    File_bytes32_bytes32_string_Event.OutputTuple,
    File_bytes32_bytes32_string_Event.OutputObject
  >;
  getEvent(
    key: "NameError"
  ): TypedContractEvent<
    NameErrorEvent.InputTuple,
    NameErrorEvent.OutputTuple,
    NameErrorEvent.OutputObject
  >;
  getEvent(
    key: "Rely"
  ): TypedContractEvent<
    RelyEvent.InputTuple,
    RelyEvent.OutputTuple,
    RelyEvent.OutputObject
  >;
  getEvent(
    key: "RemoveIlk"
  ): TypedContractEvent<
    RemoveIlkEvent.InputTuple,
    RemoveIlkEvent.OutputTuple,
    RemoveIlkEvent.OutputObject
  >;
  getEvent(
    key: "SymbolError"
  ): TypedContractEvent<
    SymbolErrorEvent.InputTuple,
    SymbolErrorEvent.OutputTuple,
    SymbolErrorEvent.OutputObject
  >;
  getEvent(
    key: "UpdateIlk"
  ): TypedContractEvent<
    UpdateIlkEvent.InputTuple,
    UpdateIlkEvent.OutputTuple,
    UpdateIlkEvent.OutputObject
  >;

  filters: {
    "AddIlk(bytes32)": TypedContractEvent<
      AddIlkEvent.InputTuple,
      AddIlkEvent.OutputTuple,
      AddIlkEvent.OutputObject
    >;
    AddIlk: TypedContractEvent<
      AddIlkEvent.InputTuple,
      AddIlkEvent.OutputTuple,
      AddIlkEvent.OutputObject
    >;

    "Deny(address)": TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;
    Deny: TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;

    "File(bytes32,address)": TypedContractEvent<
      File_bytes32_address_Event.InputTuple,
      File_bytes32_address_Event.OutputTuple,
      File_bytes32_address_Event.OutputObject
    >;
    "File(bytes32,bytes32,address)": TypedContractEvent<
      File_bytes32_bytes32_address_Event.InputTuple,
      File_bytes32_bytes32_address_Event.OutputTuple,
      File_bytes32_bytes32_address_Event.OutputObject
    >;
    "File(bytes32,bytes32,uint256)": TypedContractEvent<
      File_bytes32_bytes32_uint256_Event.InputTuple,
      File_bytes32_bytes32_uint256_Event.OutputTuple,
      File_bytes32_bytes32_uint256_Event.OutputObject
    >;
    "File(bytes32,bytes32,string)": TypedContractEvent<
      File_bytes32_bytes32_string_Event.InputTuple,
      File_bytes32_bytes32_string_Event.OutputTuple,
      File_bytes32_bytes32_string_Event.OutputObject
    >;

    "NameError(bytes32)": TypedContractEvent<
      NameErrorEvent.InputTuple,
      NameErrorEvent.OutputTuple,
      NameErrorEvent.OutputObject
    >;
    NameError: TypedContractEvent<
      NameErrorEvent.InputTuple,
      NameErrorEvent.OutputTuple,
      NameErrorEvent.OutputObject
    >;

    "Rely(address)": TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;
    Rely: TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;

    "RemoveIlk(bytes32)": TypedContractEvent<
      RemoveIlkEvent.InputTuple,
      RemoveIlkEvent.OutputTuple,
      RemoveIlkEvent.OutputObject
    >;
    RemoveIlk: TypedContractEvent<
      RemoveIlkEvent.InputTuple,
      RemoveIlkEvent.OutputTuple,
      RemoveIlkEvent.OutputObject
    >;

    "SymbolError(bytes32)": TypedContractEvent<
      SymbolErrorEvent.InputTuple,
      SymbolErrorEvent.OutputTuple,
      SymbolErrorEvent.OutputObject
    >;
    SymbolError: TypedContractEvent<
      SymbolErrorEvent.InputTuple,
      SymbolErrorEvent.OutputTuple,
      SymbolErrorEvent.OutputObject
    >;

    "UpdateIlk(bytes32)": TypedContractEvent<
      UpdateIlkEvent.InputTuple,
      UpdateIlkEvent.OutputTuple,
      UpdateIlkEvent.OutputObject
    >;
    UpdateIlk: TypedContractEvent<
      UpdateIlkEvent.InputTuple,
      UpdateIlkEvent.OutputTuple,
      UpdateIlkEvent.OutputObject
    >;
  };
}

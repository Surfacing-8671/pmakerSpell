/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VatLikeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cage"
      | "dai"
      | "debt"
      | "flux"
      | "grab"
      | "hope"
      | "ilks"
      | "move"
      | "suck"
      | "urns"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "dai", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grab",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "hope", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "ilks", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "suck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "urns",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "suck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urns", data: BytesLike): Result;
}

export interface VatLike extends BaseContract {
  connect(runner?: ContractRunner | null): VatLike;
  waitForDeployment(): Promise<this>;

  interface: VatLikeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cage: TypedContractMethod<[], [void], "nonpayable">;

  dai: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  debt: TypedContractMethod<[], [bigint], "nonpayable">;

  flux: TypedContractMethod<
    [ilk: BytesLike, src: AddressLike, dst: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  grab: TypedContractMethod<
    [
      i: BytesLike,
      u: AddressLike,
      v: AddressLike,
      w: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  hope: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  ilks: TypedContractMethod<
    [ilk: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        Art: bigint;
        rate: bigint;
        spot: bigint;
        line: bigint;
        dust: bigint;
      }
    ],
    "nonpayable"
  >;

  move: TypedContractMethod<
    [src: AddressLike, dst: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  suck: TypedContractMethod<
    [u: AddressLike, v: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  urns: TypedContractMethod<
    [ilk: BytesLike, urn: AddressLike],
    [[bigint, bigint] & { ink: bigint; art: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dai"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "debt"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "flux"
  ): TypedContractMethod<
    [ilk: BytesLike, src: AddressLike, dst: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grab"
  ): TypedContractMethod<
    [
      i: BytesLike,
      u: AddressLike,
      v: AddressLike,
      w: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hope"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ilks"
  ): TypedContractMethod<
    [ilk: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        Art: bigint;
        rate: bigint;
        spot: bigint;
        line: bigint;
        dust: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "suck"
  ): TypedContractMethod<
    [u: AddressLike, v: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "urns"
  ): TypedContractMethod<
    [ilk: BytesLike, urn: AddressLike],
    [[bigint, bigint] & { ink: bigint; art: bigint }],
    "nonpayable"
  >;

  filters: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FlopperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "beg"
      | "bids"
      | "cage"
      | "deal"
      | "dent"
      | "deny"
      | "file"
      | "gem"
      | "kick"
      | "kicks"
      | "live"
      | "pad"
      | "rely"
      | "tau"
      | "tick"
      | "ttl"
      | "vat"
      | "vow"
      | "wards"
      | "yank"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Kick"): EventFragment;

  encodeFunctionData(functionFragment: "beg", values?: undefined): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "deal", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "dent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kicks", values?: undefined): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "pad", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "tau", values?: undefined): string;
  encodeFunctionData(functionFragment: "tick", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ttl", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "yank", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "beg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tau", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ttl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yank", data: BytesLike): Result;
}

export namespace KickEvent {
  export type InputTuple = [
    id: BigNumberish,
    lot: BigNumberish,
    bid: BigNumberish,
    gal: AddressLike
  ];
  export type OutputTuple = [id: bigint, lot: bigint, bid: bigint, gal: string];
  export interface OutputObject {
    id: bigint;
    lot: bigint;
    bid: bigint;
    gal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Flopper extends BaseContract {
  connect(runner?: ContractRunner | null): Flopper;
  waitForDeployment(): Promise<this>;

  interface: FlopperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  beg: TypedContractMethod<[], [bigint], "view">;

  bids: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint] & {
        bid: bigint;
        lot: bigint;
        guy: string;
        tic: bigint;
        end: bigint;
      }
    ],
    "view"
  >;

  cage: TypedContractMethod<[], [void], "nonpayable">;

  deal: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  dent: TypedContractMethod<
    [id: BigNumberish, lot: BigNumberish, bid: BigNumberish],
    [void],
    "nonpayable"
  >;

  deny: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  file: TypedContractMethod<
    [what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;

  gem: TypedContractMethod<[], [string], "view">;

  kick: TypedContractMethod<
    [gal: AddressLike, lot: BigNumberish, bid: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  kicks: TypedContractMethod<[], [bigint], "view">;

  live: TypedContractMethod<[], [bigint], "view">;

  pad: TypedContractMethod<[], [bigint], "view">;

  rely: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  tau: TypedContractMethod<[], [bigint], "view">;

  tick: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  ttl: TypedContractMethod<[], [bigint], "view">;

  vat: TypedContractMethod<[], [string], "view">;

  vow: TypedContractMethod<[], [string], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  yank: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "beg"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint] & {
        bid: bigint;
        lot: bigint;
        guy: string;
        tic: bigint;
        end: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deal"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dent"
  ): TypedContractMethod<
    [id: BigNumberish, lot: BigNumberish, bid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "file"
  ): TypedContractMethod<
    [what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gem"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "kick"
  ): TypedContractMethod<
    [gal: AddressLike, lot: BigNumberish, bid: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "kicks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "live"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pad"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tau"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tick"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ttl"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "yank"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Kick"
  ): TypedContractEvent<
    KickEvent.InputTuple,
    KickEvent.OutputTuple,
    KickEvent.OutputObject
  >;

  filters: {
    "Kick(uint256,uint256,uint256,address)": TypedContractEvent<
      KickEvent.InputTuple,
      KickEvent.OutputTuple,
      KickEvent.OutputObject
    >;
    Kick: TypedContractEvent<
      KickEvent.InputTuple,
      KickEvent.OutputTuple,
      KickEvent.OutputObject
    >;
  };
}

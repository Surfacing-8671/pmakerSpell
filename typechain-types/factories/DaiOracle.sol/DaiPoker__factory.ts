/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { DaiPoker, DaiPokerInterface } from "../../DaiOracle.sol/DaiPoker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DAIEDAI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LOG",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "deny",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "oracleFactory",
    outputs: [
      {
        internalType: "contract IPulsexV1OracleFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "rely",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "wards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405273646daa135c6cd060573ef5957c1da3cef735837e600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006557600080fd5b5060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b2c806100b96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639c52a7f11161005b5780639c52a7f1146100ef578063bf353dbb1461010b578063c7f7fb901461013b578063e0bab4c41461015957610088565b80631816a5e11461008d57806318178358146100ab57806365fae35e146100b55780639327d0f0146100d1575b600080fd5b610095610177565b6040516100a291906106e3565b60405180910390f35b6100b361018f565b005b6100cf60048036038101906100ca919061072f565b610290565b005b6100d9610358565b6040516100e691906106e3565b60405180910390f35b6101096004803603810190610104919061072f565b610370565b005b6101256004803603810190610120919061072f565b610438565b6040516101329190610775565b60405180910390f35b610143610450565b60405161015091906107ef565b60405180910390f35b610161610476565b60405161016e91906106e3565b60405180910390f35b73da0ab1e0017debcd72be8599041a2aa3ba7e740f81565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b646638473fc64556faa683e6087f425819c7ca3c558e13ac1736b175474e89094c44da98b954eedeac495271d0f670de0b6b3a76400006040518463ffffffff1660e01b815260040161022093929190610845565b602060405180830381865afa15801561023d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026191906108a8565b90506102826103e8670de0b6b3a76400008361048e9092919063ffffffff16565b905061028d816104d1565b50565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030890610932565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b73fc64556faa683e6087f425819c7ca3c558e13ac181565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146103f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e890610932565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b736b175474e89094c44da98b954eedeac495271d0f81565b6000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04841183021582026104c357600080fd5b818385020490509392505050565b670de0b6b3a764000081106104e557600080fd5b6105226104f0610525565b7f706172000000000000000000000000000000000000000000000000000000000061051d846103e8610555565b610599565b50565b60006105507f4d43445f53504f5400000000000000000000000000000000000000000000000061060b565b905090565b60008160028361056591906109b0565b6b033b2e3c9fd0803ce80000008561057d91906109e1565b6105879190610a23565b61059191906109b0565b905092915050565b8273ffffffffffffffffffffffffffffffffffffffff166329ae811483836040518363ffffffff1660e01b81526004016105d4929190610a70565b600060405180830381600087803b1580156105ee57600080fd5b505af1158015610602573d6000803e3d6000fd5b50505050505050565b600073da0ab1e0017debcd72be8599041a2aa3ba7e740f73ffffffffffffffffffffffffffffffffffffffff166321f8a721836040518263ffffffff1660e01b815260040161065a9190610a99565b602060405180830381865afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190610ac9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106cd826106a2565b9050919050565b6106dd816106c2565b82525050565b60006020820190506106f860008301846106d4565b92915050565b600080fd5b61070c816106c2565b811461071757600080fd5b50565b60008135905061072981610703565b92915050565b600060208284031215610745576107446106fe565b5b60006107538482850161071a565b91505092915050565b6000819050919050565b61076f8161075c565b82525050565b600060208201905061078a6000830184610766565b92915050565b6000819050919050565b60006107b56107b06107ab846106a2565b610790565b6106a2565b9050919050565b60006107c78261079a565b9050919050565b60006107d9826107bc565b9050919050565b6107e9816107ce565b82525050565b600060208201905061080460008301846107e0565b92915050565b6000819050919050565b600061082f61082a6108258461080a565b610790565b61075c565b9050919050565b61083f81610814565b82525050565b600060608201905061085a60008301866106d4565b61086760208301856106d4565b6108746040830184610836565b949350505050565b6108858161075c565b811461089057600080fd5b50565b6000815190506108a28161087c565b92915050565b6000602082840312156108be576108bd6106fe565b5b60006108cc84828501610893565b91505092915050565b600082825260208201905092915050565b7f4469614f7261636c652f6e6f742d617574686f72697a65640000000000000000600082015250565b600061091c6018836108d5565b9150610927826108e6565b602082019050919050565b6000602082019050818103600083015261094b8161090f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109bb8261075c565b91506109c68361075c565b9250826109d6576109d5610952565b5b828204905092915050565b60006109ec8261075c565b91506109f78361075c565b9250828202610a058161075c565b91508282048414831517610a1c57610a1b610981565b5b5092915050565b6000610a2e8261075c565b9150610a398361075c565b9250828201905080821115610a5157610a50610981565b5b92915050565b6000819050919050565b610a6a81610a57565b82525050565b6000604082019050610a856000830185610a61565b610a926020830184610766565b9392505050565b6000602082019050610aae6000830184610a61565b92915050565b600081519050610ac381610703565b92915050565b600060208284031215610adf57610ade6106fe565b5b6000610aed84828501610ab4565b9150509291505056fea264697066735822122059fab26adb2f128111e91c425127945274a7e2cd4ef4fb3baebaf6cd30ba255b64736f6c63430008180033";

type DaiPokerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DaiPokerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DaiPoker__factory extends ContractFactory {
  constructor(...args: DaiPokerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DaiPoker & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DaiPoker__factory {
    return super.connect(runner) as DaiPoker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DaiPokerInterface {
    return new Interface(_abi) as DaiPokerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DaiPoker {
    return new Contract(address, _abi, runner) as unknown as DaiPoker;
  }
}

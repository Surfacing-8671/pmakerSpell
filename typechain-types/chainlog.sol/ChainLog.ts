/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ChainLogInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "count"
      | "deny"
      | "get"
      | "getAddress"
      | "ipfs"
      | "keys"
      | "list"
      | "rely"
      | "removeAddress"
      | "setAddress"
      | "setIPFS"
      | "setSha256sum"
      | "setVersion"
      | "sha256sum"
      | "version"
      | "wards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deny"
      | "Rely"
      | "RemoveAddress"
      | "UpdateAddress"
      | "UpdateIPFS"
      | "UpdateSha256sum"
      | "UpdateVersion"
  ): EventFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ipfs", values?: undefined): string;
  encodeFunctionData(functionFragment: "keys", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "removeAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setIPFS", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSha256sum",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setVersion", values: [string]): string;
  encodeFunctionData(functionFragment: "sha256sum", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipfs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setIPFS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSha256sum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sha256sum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
}

export namespace DenyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelyEvent {
  export type InputTuple = [usr: AddressLike];
  export type OutputTuple = [usr: string];
  export interface OutputObject {
    usr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAddressEvent {
  export type InputTuple = [key: BytesLike];
  export type OutputTuple = [key: string];
  export interface OutputObject {
    key: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAddressEvent {
  export type InputTuple = [key: BytesLike, addr: AddressLike];
  export type OutputTuple = [key: string, addr: string];
  export interface OutputObject {
    key: string;
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateIPFSEvent {
  export type InputTuple = [ipfs: string];
  export type OutputTuple = [ipfs: string];
  export interface OutputObject {
    ipfs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSha256sumEvent {
  export type InputTuple = [sha256sum: string];
  export type OutputTuple = [sha256sum: string];
  export interface OutputObject {
    sha256sum: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateVersionEvent {
  export type InputTuple = [version: string];
  export type OutputTuple = [version: string];
  export interface OutputObject {
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainLog extends BaseContract {
  connect(runner?: ContractRunner | null): ChainLog;
  waitForDeployment(): Promise<this>;

  interface: ChainLogInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  count: TypedContractMethod<[], [bigint], "view">;

  deny: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  get: TypedContractMethod<[_index: BigNumberish], [[string, string]], "view">;

  getAddress: TypedContractMethod<[_key: BytesLike], [string], "view">;

  ipfs: TypedContractMethod<[], [string], "view">;

  keys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  list: TypedContractMethod<[], [string[]], "view">;

  rely: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  removeAddress: TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;

  setAddress: TypedContractMethod<
    [_key: BytesLike, _addr: AddressLike],
    [void],
    "nonpayable"
  >;

  setIPFS: TypedContractMethod<[_ipfs: string], [void], "nonpayable">;

  setSha256sum: TypedContractMethod<[_sha256sum: string], [void], "nonpayable">;

  setVersion: TypedContractMethod<[_version: string], [void], "nonpayable">;

  sha256sum: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [string], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[_index: BigNumberish], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[_key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "ipfs"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "keys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAddress"
  ): TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [_key: BytesLike, _addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIPFS"
  ): TypedContractMethod<[_ipfs: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSha256sum"
  ): TypedContractMethod<[_sha256sum: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVersion"
  ): TypedContractMethod<[_version: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sha256sum"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Deny"
  ): TypedContractEvent<
    DenyEvent.InputTuple,
    DenyEvent.OutputTuple,
    DenyEvent.OutputObject
  >;
  getEvent(
    key: "Rely"
  ): TypedContractEvent<
    RelyEvent.InputTuple,
    RelyEvent.OutputTuple,
    RelyEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAddress"
  ): TypedContractEvent<
    RemoveAddressEvent.InputTuple,
    RemoveAddressEvent.OutputTuple,
    RemoveAddressEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAddress"
  ): TypedContractEvent<
    UpdateAddressEvent.InputTuple,
    UpdateAddressEvent.OutputTuple,
    UpdateAddressEvent.OutputObject
  >;
  getEvent(
    key: "UpdateIPFS"
  ): TypedContractEvent<
    UpdateIPFSEvent.InputTuple,
    UpdateIPFSEvent.OutputTuple,
    UpdateIPFSEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSha256sum"
  ): TypedContractEvent<
    UpdateSha256sumEvent.InputTuple,
    UpdateSha256sumEvent.OutputTuple,
    UpdateSha256sumEvent.OutputObject
  >;
  getEvent(
    key: "UpdateVersion"
  ): TypedContractEvent<
    UpdateVersionEvent.InputTuple,
    UpdateVersionEvent.OutputTuple,
    UpdateVersionEvent.OutputObject
  >;

  filters: {
    "Deny(address)": TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;
    Deny: TypedContractEvent<
      DenyEvent.InputTuple,
      DenyEvent.OutputTuple,
      DenyEvent.OutputObject
    >;

    "Rely(address)": TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;
    Rely: TypedContractEvent<
      RelyEvent.InputTuple,
      RelyEvent.OutputTuple,
      RelyEvent.OutputObject
    >;

    "RemoveAddress(bytes32)": TypedContractEvent<
      RemoveAddressEvent.InputTuple,
      RemoveAddressEvent.OutputTuple,
      RemoveAddressEvent.OutputObject
    >;
    RemoveAddress: TypedContractEvent<
      RemoveAddressEvent.InputTuple,
      RemoveAddressEvent.OutputTuple,
      RemoveAddressEvent.OutputObject
    >;

    "UpdateAddress(bytes32,address)": TypedContractEvent<
      UpdateAddressEvent.InputTuple,
      UpdateAddressEvent.OutputTuple,
      UpdateAddressEvent.OutputObject
    >;
    UpdateAddress: TypedContractEvent<
      UpdateAddressEvent.InputTuple,
      UpdateAddressEvent.OutputTuple,
      UpdateAddressEvent.OutputObject
    >;

    "UpdateIPFS(string)": TypedContractEvent<
      UpdateIPFSEvent.InputTuple,
      UpdateIPFSEvent.OutputTuple,
      UpdateIPFSEvent.OutputObject
    >;
    UpdateIPFS: TypedContractEvent<
      UpdateIPFSEvent.InputTuple,
      UpdateIPFSEvent.OutputTuple,
      UpdateIPFSEvent.OutputObject
    >;

    "UpdateSha256sum(string)": TypedContractEvent<
      UpdateSha256sumEvent.InputTuple,
      UpdateSha256sumEvent.OutputTuple,
      UpdateSha256sumEvent.OutputObject
    >;
    UpdateSha256sum: TypedContractEvent<
      UpdateSha256sumEvent.InputTuple,
      UpdateSha256sumEvent.OutputTuple,
      UpdateSha256sumEvent.OutputObject
    >;

    "UpdateVersion(string)": TypedContractEvent<
      UpdateVersionEvent.InputTuple,
      UpdateVersionEvent.OutputTuple,
      UpdateVersionEvent.OutputObject
    >;
    UpdateVersion: TypedContractEvent<
      UpdateVersionEvent.InputTuple,
      UpdateVersionEvent.OutputTuple,
      UpdateVersionEvent.OutputObject
    >;
  };
}

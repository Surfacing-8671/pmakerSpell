{"/home/surfacing8671/Desktop/dss/hardhat.config.ts":{"path":"/home/surfacing8671/Desktop/dss/hardhat.config.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":25}},"5":{"start":{"line":7,"column":15},"end":{"line":110,"column":1}},"6":{"start":{"line":111,"column":0},"end":{"line":111,"column":25}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/home/surfacing8671/Desktop/dss/hardhat.config.ts","sources":["/home/surfacing8671/Desktop/dss/hardhat.config.ts"],"names":[],"mappings":";;AACA,4CAA0C;AAC1C,gCAA8B;AAC9B,6BAA2B;AAC3B,yBAAsB;AAGtB,MAAM,MAAM,GAAsB;IAE9B,QAAQ,EAAE;QACN,SAAS,EAAE;YACP;gBACI,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE;oBACN,SAAS,EAAE;wBACP,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,GAAG;qBACZ;iBACJ;aACJ,EAAE;gBACC,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE;oBACN,SAAS,EAAE;wBACP,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,GAAG;qBACZ;iBACJ;aACJ;YACD;gBACI,OAAO,EAAE,OAAO;aACnB;YACD;gBACI,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE;oBACN,KAAK,EAAE,IAAI;oBACX,SAAS,EAAE;wBACP,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,GAAG;qBACZ;iBACJ;aACJ;YACD;gBACI,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE;oBACN,SAAS,EAAE;wBACP,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,GAAG;qBACZ;iBACJ;aACJ;YAGD;gBACI,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE;oBACN,KAAK,EAAE,IAAI;oBACX,SAAS,EAAE;wBAGP,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,GAAG;qBAEZ;iBACJ;aAEJ;YACD;gBACI,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE;oBACN,KAAK,EAAE,IAAI;oBACX,SAAS,EAAE;wBAGP,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,GAAG;qBAEZ;iBACJ;aAEJ;SACJ;KACJ;IAED,QAAQ,EAAE;QAEN,yDAAyD;QACzD,UAAU,EAAE;YACR,GAAG,EAAE,4BAA4B;YACjC,8DAA8D;YAC9D,QAAQ,EAAE,CAAC,oEAAoE,CAAC;SACnF;QACD,KAAK,EAAE;YACH,GAAG,EAAE,wBAAwB;YAC7B,8DAA8D;YAC9D,QAAQ,EAAE,CAAC,oEAAoE,CAAC;SACnF;QACD,OAAO,EAAE;YACL,cAAc,EAAE,KAAK;YACrB,OAAO,EAAE;gBACT,GAAG,EAAE,wBAAwB;aAE5B;YACD,8DAA8D;YAC9D,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,oEAAoE,EAAE,OAAO,EAAE,uCAAuC,EAAE,EAAC,EAAE,UAAU,EAAE,oEAAoE,EAAE,OAAO,EAAE,uCAAuC,EAAE;aAEvR;YACD,MAAM,EAAE;gBACJ,OAAO,EAAE;oBACL,KAAK,EAAE,MAAM;iBAChB;aACJ;YACD,oBAAoB,EAAE,UAAU,EAAE,kBAAkB;SAEvD;KAGJ;IACD,KAAK,EAAE;QACH,OAAO,EAAE,KAAK,EAAE,iDAAiD;KAClE;IACH,WAAW,EAAE;QACT,OAAO,EAAE,IAAI,EAAE,uBAAuB;QACtC,QAAQ,EAAE,KAAK,EAAE,2BAA2B;QAC5C,aAAa,EAAE,sCAAsC,EAAE,2CAA2C;QAClG,QAAQ,EAAE,EAAE,EAAE,8CAA8C;QAC5D,UAAU,EAAE,gBAAgB,EAAE,yCAAyC;QACvE,QAAQ,EAAE,KAAK,EAAE,uCAAuC;KACzD;CAGN,CAAA;AAGD,kBAAe,MAAM,CAAC","sourcesContent":["import {HardhatUserConfig} from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\nimport \"hardhat-gas-reporter\";\nimport \"solidity-coverage\";\nimport 'dotenv/config'\n\n\nconst config: HardhatUserConfig = {\n\n    solidity: {\n        compilers: [\n            {\n                version: \"0.8.11\",\n                settings: {\n                    optimizer: {\n                        enabled: true,\n                        runs: 200,\n                    },\n                },\n            }, {\n                version: '0.6.12',\n                settings: {\n                    optimizer: {\n                        enabled: true,\n                        runs: 199,\n                    },\n                },\n            },\n            {\n                version: \"0.6.6\",\n            },\n            {\n                version: \"0.8.24\",\n                settings: {\n                    viaIR: true,\n                    optimizer: {\n                        enabled: true,\n                        runs: 200,\n                    },\n                },\n            },\n            {\n                version: \"0.8.23\",\n                settings: {\n                    optimizer: {\n                        enabled: true,\n                        runs: 200,\n                    },\n                },\n            },\n\n\n            {\n                version: \"0.8.26\",\n                settings: {\n                    viaIR: true,\n                    optimizer: {\n\n\n                        enabled: true,\n                        runs: 200,\n\n                    },\n                },\n\n            },\n            {\n                version: \"0.5.12\",\n                settings: {\n                    viaIR: true,\n                    optimizer: {\n\n\n                        enabled: true,\n                        runs: 200,\n\n                    },\n                },\n\n            },\n        ],\n    },\n\n    networks: {\n        \n        // pulsechain network,  we will be just reading from here\n        pulsechain: {\n            url: 'https://rpc.pulsechain.com',\n            // just and well known address for just reading.  not valuable\n            accounts: ['0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80']\n        },\n        local: {\n            url: 'http://127.0.0.1:8545/',\n            // just and well known address for just reading.  not valuable\n            accounts: ['0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80']\n        },\n        hardhat: {\n            loggingEnabled: false,\n            forking: {\n            url: 'http://127.0.0.1:8545/',\n            \n            },\n            // just and well known address for just reading.  not valuable\n            accounts: [{ privateKey: '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', balance: '1000000000000000000000000000000000000' },{ privateKey: '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', balance: '1000000000000000000000000000000000000' }\n                \n            ],\n            mining: {\n                mempool: {\n                    order: \"fifo\"\n                }\n            },\n            initialBaseFeePerGas: 1000000000, // 1 gwei base fee\n           \n        },\n        \n\n    },\n    mocha: {\n        timeout: 80000, // Optional: Increase test timeout for slow forks\n      },\n    gasReporter: {\n        enabled: true, // Enable gas reporting\n        currency: \"USD\", // Display gas costs in USD\n        coinmarketcap: \"67b4952d-f2c7-43ca-8e1c-5e4b9a62f966\", // (Optional) To fetch real-time gas prices\n        gasPrice: 20, // (Optional) Use a custom gas price (in gwei)\n        outputFile: \"gas-report.txt\", // (Optional) Output gas report to a file\n        noColors: false, // Disable colors in the console output\n      },\n\n\n}\n\n\nexport default config;\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ded2801ba5907ed3a9c8d47105d479d9be44a79e","contentHash":"31ea73b24cf38d4777322d46870edc94004442bd3b7bc80c5246569c90a3df0c"},"/home/surfacing8671/Desktop/dss/hardhat/slotOverwrite.ts":{"path":"/home/surfacing8671/Desktop/dss/hardhat/slotOverwrite.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/home/surfacing8671/Desktop/dss/hardhat/slotOverwrite.ts","sources":["/home/surfacing8671/Desktop/dss/hardhat/slotOverwrite.ts"],"names":[],"mappings":";AAAA,6BAA6B;AAC7B,mCAAmC;AACnC,+EAA+E;AAC/E,+CAA+C;AAC/C,oDAAoD;AACpD,wDAAwD;AACxD,mEAAmE;AACnE,gFAAgF;AAEhF,8CAA8C;AAC9C,gCAAgC;AAChC,mBAAmB;AACnB,wDAAwD;AACxD,SAAS;AACT,2CAA2C;AAC3C,kGAAkG;AAClG,QAAQ;AACR,8FAA8F;AAC9F,KAAK;AAEL,qDAAqD;AACrD,uBAAuB;AACvB,2BAA2B;AAC3B,oCAAoC;AACpC,wDAAwD;AACxD,SAAS;AACT,4FAA4F;AAC5F,+DAA+D;AAC/D,mEAAmE;AACnE,KAAK;AAEL,4CAA4C;AAC5C,4BAA4B;AAC5B,2BAA2B;AAC3B,2BAA2B;AAC3B,wDAAwD;AACxD,SAAS;AACT,0FAA0F;AAC1F,2FAA2F;AAC3F,KAAK;AAEL,8CAA8C;AAC9C,4BAA4B;AAC5B,kCAAkC;AAClC,0BAA0B;AAC1B,2BAA2B;AAC3B,wDAAwD;AACxD,SAAS;AACT,sFAAsF;AACtF,+EAA+E;AAC/E,KAAK;AAEL,uDAAuD;AACvD,+BAA+B;AAC/B,kCAAkC;AAClC,0BAA0B;AAC1B,2BAA2B;AAC3B,yDAAyD;AACzD,wDAAwD;AACxD,SAAS;AACT,sGAAsG;AACtG,2FAA2F;AAC3F,KAAK;AAEL,4CAA4C;AAC5C,4BAA4B;AAC5B,kCAAkC;AAClC,2BAA2B;AAC3B,8BAA8B;AAC9B,2BAA2B;AAC3B,wDAAwD;AACxD,SAAS;AACT,sFAAsF;AACtF,gGAAgG;AAChG,KAAK;AACL,kGAAkG;AAClG,kFAAkF;AAClF,4EAA4E;AAC5E,gDAAgD;AAChD,KAAK;AACL,kEAAkE;AAClE,4BAA4B;AAC5B,iCAAiC;AACjC,iCAAiC;AACjC,+BAA+B;AAC/B,4CAA4C;AAC5C,iBAAiB;AACjB,SAAS;AACT,yDAAyD;AACzD,2CAA2C;AAC3C,iHAAiH;AACjH,+CAA+C;AAC/C,4BAA4B;AAC5B,oBAAoB;AACpB,kCAAkC;AAClC,8BAA8B;AAC9B,yBAAyB;AACzB,6BAA6B;AAC7B,aAAa;AAEb,mCAAmC;AACnC,2EAA2E;AAC3E,yHAAyH;AACzH,mDAAmD;AACnD,gCAAgC;AAChC,wBAAwB;AACxB,sCAAsC;AACtC,gCAAgC;AAChC,6BAA6B;AAC7B,iCAAiC;AACjC,iBAAiB;AACjB,6EAA6E;AAC7E,sCAAsC;AACtC,gBAAgB;AAChB,YAAY;AACZ,qBAAqB;AACrB,+CAA+C;AAC/C,4BAA4B;AAC5B,oBAAoB;AACpB,kCAAkC;AAClC,mCAAmC;AACnC,yBAAyB;AACzB,6BAA6B;AAC7B,aAAa;AACb,6BAA6B;AAC7B,2BAA2B;AAC3B,YAAY;AACZ,QAAQ;AACR,mBAAmB;AACnB,KAAK;AAEL,qGAAqG;AACrG,sEAAsE;AACtE,+DAA+D;AAC/D,0BAA0B;AAC1B,uBAAuB;AACvB,QAAQ;AACR,oBAAoB;AACpB,KAAK;AACL,iFAAiF;AACjF,0FAA0F;AAC1F,+CAA+C;AAC/C,yDAAyD;AACzD,iDAAiD;AACjD,oHAAoH;AACpH,0GAA0G;AAE1G,mCAAmC;AACnC,wDAAwD;AACxD,kCAAkC;AAClC,YAAY;AACZ,qBAAqB;AACrB,+GAA+G;AAC/G,6BAA6B;AAC7B,2BAA2B;AAC3B,YAAY;AACZ,QAAQ;AACR,mBAAmB;AACnB,KAAK;AACL,kFAAkF;AAClF,wEAAwE;AACxE,0BAA0B;AAC1B,wGAAwG;AACxG,QAAQ;AACR,mGAAmG;AACnG,KAAK","sourcesContent":["// import hre from 'hardhat';\n// import { ethers } from 'ethers';\n// import getContract, { getContractAddressByName } from '../../src/contracts';\n// import BigNumber from '../../src/bignumber';\n// import { EthereumProvider } from 'hardhat/types';\n// import { formatToHex } from '../test/helpers/format';\n// import { pad32, concat, stripZeros } from '../test/helpers/hex';\n// import { TEST_NETWORK, HARDHAT_PUBLIC_KEY } from '../test/helpers/constants';\n\n// export const generateMappingSlotAddress = (\n//     mappingStartSlot: string,\n//     key: string,\n//     languageFormat: 'vyper' | 'solidity' = 'solidity'\n// ) => {\n//     if (languageFormat === 'solidity') {\n//         return stripZeros(ethers.utils.keccak256(concat(pad32(key), pad32(mappingStartSlot))));\n//     }\n//     return stripZeros(ethers.utils.keccak256(concat(pad32(mappingStartSlot), pad32(key))));\n// };\n\n// export const overwriteUintValueInAddress = async (\n//     address: string,\n//     slotAddress: string,\n//     newValue: BigNumber | string,\n//     provider: EthereumProvider = hre.network.provider\n// ) => {\n//     const hexValue = typeof newValue === 'string' ? newValue : formatToHex(newValue, 32);\n//     const storageToWrite = [address, slotAddress, hexValue];\n//     await provider.send('hardhat_setStorageAt', storageToWrite);\n// };\n\n// export const overwriteUintValue = async (\n//     contractName: string,\n//     slotAddress: string,\n//     newValue: BigNumber,\n//     provider: EthereumProvider = hre.network.provider\n// ) => {\n//     const contractAddress = await getContractAddressByName(TEST_NETWORK, contractName);\n//     await overwriteUintValueInAddress(contractAddress, slotAddress, newValue, provider);\n// };\n\n// export const overwriteUintMapping = async (\n//     contractName: string,\n//     mappingSlotAddress: string,\n//     mappingKey: string,\n//     newValue: BigNumber,\n//     provider: EthereumProvider = hre.network.provider\n// ) => {\n//     const slotAddress = generateMappingSlotAddress(mappingSlotAddress, mappingKey);\n//     await overwriteUintValue(contractName, slotAddress, newValue, provider);\n// };\n\n// export const overwriteUintMappingInAddress = async (\n//     contractAddress: string,\n//     mappingSlotAddress: string,\n//     mappingKey: string,\n//     newValue: BigNumber,\n//     provider: EthereumProvider = hre.network.provider,\n//     languageFormat: 'vyper' | 'solidity' = 'solidity'\n// ) => {\n//     const slotAddress = generateMappingSlotAddress(mappingSlotAddress, mappingKey, languageFormat);\n//     await overwriteUintValueInAddress(contractAddress, slotAddress, newValue, provider);\n// };\n\n// export const overwriteUintTable = async (\n//     contractName: string,\n//     mappingSlotAddress: string,\n//     tableRowKey: string,\n//     tableColumnKey: string,\n//     newValue: BigNumber,\n//     provider: EthereumProvider = hre.network.provider\n// ) => {\n//     const rowAddress = generateMappingSlotAddress(mappingSlotAddress, tableRowKey);\n//     await overwriteUintMapping(contractName, rowAddress, tableColumnKey, newValue, provider);\n// };\n// const isOverwrittenBalanceEqual = async (contract: ethers.Contract, oldBalance: BigNumber) => {\n//     const overwrittenBalanceHex = await contract.balanceOf(HARDHAT_PUBLIC_KEY);\n//     const overwrittenBalance = new BigNumber(overwrittenBalanceHex._hex);\n//     return overwrittenBalance.eq(oldBalance);\n// };\n// export const runBalanceSlotDiscoveryLoopForERC20Token = async (\n//     tokenAddress: string,\n//     contract: ethers.Contract,\n//     overwriteValue: BigNumber,\n//     initialValue: BigNumber,\n//     languageFormat: 'solidity' | 'vyper',\n//     loops = 10\n// ) => {\n//     for (const i of Array.from(Array(loops).keys())) {\n//         const slot = ethers.hexValue(i);\n//         const slotValueBeforeEdit = new BigNumber(await hre.ethers.provider.getStorageAt(tokenAddress, slot));\n//         await overwriteUintMappingInAddress(\n//             tokenAddress,\n//             slot,\n//             HARDHAT_PUBLIC_KEY,\n//             overwriteValue,\n//             undefined,\n//             languageFormat\n//         );\n\n//         let isSlotFound = false;\n//         if (await isOverwrittenBalanceEqual(contract, overwriteValue)) {\n//             // double check to make sure the value in the slot is not accidentally the same as the hardcoded one above\n//             await overwriteUintMappingInAddress(\n//                 tokenAddress,\n//                 slot,\n//                 HARDHAT_PUBLIC_KEY,\n//                 initialValue,\n//                 undefined,\n//                 languageFormat\n//             );\n//             if (await isOverwrittenBalanceEqual(contract, initialValue)) {\n//                 isSlotFound = true;\n//             }\n//         }\n//         // cleanup\n//         await overwriteUintMappingInAddress(\n//             tokenAddress,\n//             slot,\n//             HARDHAT_PUBLIC_KEY,\n//             slotValueBeforeEdit,\n//             undefined,\n//             languageFormat\n//         );\n//         if (isSlotFound) {\n//             return slot;\n//         }\n//     }\n//     return null;\n// };\n\n// const hasAdminPriveleges = async (contractName: string, address: string = HARDHAT_PUBLIC_KEY) => {\n//     const contract = await getContract(TEST_NETWORK, contractName);\n//     const access: BigNumber = await contract.wards(address);\n//     if (access.eq(1)) {\n//         return true;\n//     }\n//     return false;\n// };\n// const discoverAdminMappingSlot = async (contractName: string, loops = 10) => {\n//     const contractAddress = await getContractAddressByName(TEST_NETWORK, contractName);\n//     const overwriteValue = new BigNumber(1);\n//     for (const i of Array.from(Array(loops).keys())) {\n//         const slot = ethers.utils.hexValue(i);\n//         const slotValueBeforeEdit = new BigNumber(await hre.ethers.provider.getStorageAt(contractAddress, slot));\n//         await overwriteUintMappingInAddress(contractAddress, slot, HARDHAT_PUBLIC_KEY, overwriteValue);\n\n//         let isSlotFound = false;\n//         if (await hasAdminPriveleges(contractName)) {\n//             isSlotFound = true;\n//         }\n//         // cleanup\n//         await overwriteUintMappingInAddress(contractAddress, slot, HARDHAT_PUBLIC_KEY, slotValueBeforeEdit);\n//         if (isSlotFound) {\n//             return slot;\n//         }\n//     }\n//     return null;\n// };\n// export const grantAdminPrivelegeForContract = async (contractName: string) => {\n//     const slotAddress = await discoverAdminMappingSlot(contractName);\n//     if (!slotAddress) {\n//         throw new Error(`Failed to discover slot with admin priveleges of contract ${contractName}`);\n//     }\n//     await overwriteUintMapping(contractName, slotAddress, HARDHAT_PUBLIC_KEY, new BigNumber(1));\n// };\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d882d6819461fa8c62eb5a1eee5cd177d458f931","contentHash":"cd94fafb3effde16b2ce52b59e56d9dec90aa07130ead2e4b34af6063a7dc5d7"}}